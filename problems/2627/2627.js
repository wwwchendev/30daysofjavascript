// 2627. Debounce

// 給定一個函數“fn”和一個以毫秒為單位的時間“t”，返回該函數的去抖版本。
// 去抖函數是指其執行延遲“t”毫秒的函數，如果在該時間窗口內再次調用該函數，則其執行將被取消。 
// 去抖函數還應該接收傳遞的參數。

// 例如，假設“t = 50ms”，並且該函數在“30ms”、“60ms”和“100ms”時調用。
// 前 2 個函數調用將被取消，第 3 個函數調用將在“150ms”處執行。 

// 如果改為“t = 35ms”，則第一個調用將被取消，
// 第二個調用將在“95m​​s”執行，第三個調用將在“135ms”執行。


// 1.給定一個函數“fn”和一個以毫秒為單位的時間“t”，返回該函數的去抖版本。

// function debounce(fn, t) {

//     return () => {
//         //調用邏輯
//     };
//   }

// 2.去抖函數是指其執行延遲“t”毫秒的函數，如果在該時間窗口內再次調用該函數，則其執行將被取消。 
// 去抖函數還應該接收傳遞的參數。
// 如果在該時間窗口內再次調用該函數，則其執行將被取消。
// -> 調用的時候，如果計時器存在應該清除計時器以取消調用fn 
// -> 外部作用域要宣告變數`timer`來記憶 timeoutID，在內部引用setTimeout()把ID傳到`timer`
// -> 在重置計時器之前應先清除原本的計時器，在setTimeout之前設置clearTimeout把舊的計時器清除。

function debounce(fn, t) { 
    let timer ;

    return (...args) => {
        clearTimeout(timer);
        timer = setTimeout(()=>{fn(...args)},t);
    };
  }
